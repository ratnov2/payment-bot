import base64
from io import BytesIO

from aiogram.types import InputFile, BufferedInputFile
from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
from app.api.schemas import QRCodeRequest, QRCodeScaner
from app.bot.create_bot import bot
from app.bot.keyboards.kbs import main_keyboard

router = APIRouter(prefix='/api', tags=['–ê–ü–ò'])


@router.post("/send-qr/", response_class=JSONResponse)
async def send_qr_code(request: QRCodeRequest):
    try:
        # –ü–æ–ª—É—á–∞–µ–º base64 —Å—Ç—Ä–æ–∫—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        base64_data = request.qr_code_url

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å MIME, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if base64_data.startswith('data:image/'):
            base64_data = base64_data.split(',', 1)[1]

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
        image_data = base64.b64decode(base64_data)

        # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_file = BufferedInputFile(file=image_data, filename="qr_code.png")

        caption = (
            "üéâ –í–∞—à QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            "üîç –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n"
            "üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º QR-–∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üëá"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await bot.send_photo(
            chat_id=request.user_id,
            photo=image_file,  # –ü–µ—Ä–µ–¥–∞–µ–º BufferedInputFile
            caption=caption,
            reply_markup=main_keyboard()
        )

        return JSONResponse(content={"message": "QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}, status_code=200)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞: {str(e)}")


@router.post("/send-scaner-info/", response_class=JSONResponse)
async def send_qr_code(request: QRCodeScaner):
    try:
        text = (
            f"üéâ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            f"<code><b>{request.result_scan}</b></code>\n\n"
            f"üîó –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π.\n"
            f"üìù –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? üëá"
        )
        await bot.send_message(chat_id=request.user_id, text=text, reply_markup=main_keyboard())
        return JSONResponse(content={"message": "QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω, –∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram"},
                            status_code=200)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
